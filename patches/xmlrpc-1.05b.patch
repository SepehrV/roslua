diff -urN luaxmlrpc-1.0b/xmlrpc.lua luaxmlrpc-1.0b.timn/xmlrpc.lua
--- luaxmlrpc-1.0b/xmlrpc.lua	2004-12-02 13:32:08.000000000 -0500
+++ luaxmlrpc-1.0b.timn/xmlrpc.lua	2010-07-30 12:47:35.000000000 -0400
@@ -13,7 +13,8 @@
 local ceil = math.ceil
 local parse = lxp.lom.parse
 
-module (arg and arg[1])
+--module (arg and arg[1])
+module("xmlrpc")
 
 _COPYRIGHT = "Copyright (C) 2003-2004 Kepler Project"
 _DESCRIPTION = "LuaXMLRPC is a library to make remote procedure calls using XML-RPC"
@@ -77,13 +78,13 @@
 local function x2boolean (tab)
 	if tab.tag == "boolean" then
 		local v = next_nonspace (tab, 1)
-		return v == true or v == "true" or false
+		return v == true or v == "true"  or v == "1" or false
 	end
 end
 
 ---------------------------------------------------------------------
 local function x2string (tab)
-	return tab.tag == "string" and tab[1]
+	return tab.tag == "string" and (tab[1] or "")
 end
 
 ---------------------------------------------------------------------
@@ -204,6 +205,9 @@
 		local get = xmlrpc_types[t]
 		if not get then error ("Invalid <"..t.."> element") end
 		return get (next_nonspace (tab))
+	elseif type(n) == "nil" then
+		-- the next best thing is to assume it's an empty string
+		return ""
 	end
 end
 
@@ -367,7 +371,13 @@
 	local et = typ.elemtype
 	local f = format_func (et)
 	for i,v in ipairs (val) do
-		tinsert (ret, format (formats.value, f (v, et)))
+		if et and et ~= "array" then
+			tinsert (ret, format (formats.value, f (v, et)))
+		else
+			local ct,cv = type_val(v)
+			local cf = format_func(ct)
+			tinsert (ret, format (formats.value, cf(cv, ct)))
+		end
 	end
 	return format (formats.array, concat (ret, '\n'))
 end
@@ -400,7 +410,7 @@
 ---------------------------------------------------------------------
 -- Get type and value of object.
 ---------------------------------------------------------------------
-local function type_val (obj)
+function type_val (obj)
 	local t = type (obj)
 	local v = obj
 	if t == "table" then
